/* jQuery Parallax - v1.1.3 - parallax background effects
 * http://www.ianlunn.co.uk/plugins/jquery-parallax/
 * Copyright (c) Ian Lunn. Dual licensed under the MIT and GPL licenses.
 */
(function(e){var t=e(window);var n=t.height();t.resize(function(){n=t.height()});e.fn.parallax=function(r,i,s){function l(){var s=t.scrollTop();o.each(function(){var t=e(this);var a=t.offset().top;var f=u(t);if(a+f<s||a>s+n){return}o.css("backgroundPosition",r+" "+Math.round((a-s)*i)+"px")})}var o=e(this);var u;var a;var f=0;o.each(function(){a=o.offset().top});if(s){u=function(e){return e.outerHeight(true)}}else{u=function(e){return e.height()}}if(arguments.length<1||r===null)r="50%";if(arguments.length<2||i===null)i=.1;if(arguments.length<3||s===null)s=true;t.bind("scroll",l).resize(l);l()}})(jQuery)

var $window = jQuery(window);
var windowHeight = $window.height();
$window.resize(function () {
	windowHeight = $window.height();
});

$.fn.hparallax = function(xpos, speedFactor, outerHeight) {
	var $this = $(this);
	var getHeight;
	var firstTop;
	var paddingTop = 0;
	if (outerHeight) {
		getHeight = function(jqo) {
			return jqo.outerHeight(true);
		};
	} else {
		getHeight = function(jqo) {
			return jqo.height();
		};
	}
	if (arguments.length < 1 || xpos === null) {
		xpos = "50%";
	}
	if (arguments.length < 2 || speedFactor === null) {
		speedFactor = 0.5;
	}
	if (arguments.length < 3 || outerHeight === null) {
		outerHeight = true;
	}
	speedFactor = ($(this).data("parallax_sense")) / 100;
	xpos = "0px";
	var prev_pos = $window.scrollTop();

	function update() {
		var pos = $window.scrollTop();
		$this.each(function() {
			firstTop = $(this).offset().top;
			var $element = $(this);
			var top = $element.offset().top;
			var height = getHeight($element);
			if (top + height < pos || top > pos + windowHeight) {
				return;
			}
			var bg = $(this).css("backgroundPosition");
			var pxpos = bg.indexOf("px");
			var bgxpos = bg.substring(0, pxpos);
			var f = 0;
			if (prev_pos - pos <= 0) {
				f = parseInt(bgxpos) - parseInt(speedFactor * (Math.abs(prev_pos - pos)));
			} else {
				f = parseInt(bgxpos) + parseInt(speedFactor * (prev_pos - pos));
				if (f > 0) {
					f = 0;
				}
			}
			$(this).css("backgroundPosition", f + "px " + xpos);
		});
		prev_pos = pos;
	}
	$window.bind("scroll", update).resize(update);
	update();
};
	
$.fn.animatedparallax = function(index, element) {
	var $this = $(this);
	var repeat = $this.data('animation-repeat');
	$this.css({'background-repeat':repeat});

		var scrollSpeed = 10;
		if($this.attr('data-parallax_sense') != '')
			scrollSpeed = $this.attr('data-parallax_sense');
			
		scrollSpeed = 100 - scrollSpeed;	
		
		var animation_type = $this.attr('data-bg-animation-type');
		var animation = $this.attr('data-bg-animation');
		
		// set the default position
		var current = 0;
		// set the direction
		var direction = animation_type;
		//Calls the scrolling function repeatedly
		setInterval(function(e){
			if(animation == 'right-animation' || animation == 'bottom-animation')
				current -= 1;
			else
				current += 1;
			$this.css("backgroundPosition", (direction == 'horizontal') ? current+"px 0" : "0 " + current+"px");
		}, scrollSpeed);
	
};	